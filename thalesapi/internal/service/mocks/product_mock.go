// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "thalesapi/data/dto"
	models "thalesapi/data/models"
	params "thalesapi/data/params"
	builder "thalesapi/db/builder"

	gomock "github.com/golang/mock/gomock"
)

// MockProductService is a mock of ProductService interfaces.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductService) AddProduct(product *dto.ProductMutableAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductServiceMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductService)(nil).AddProduct), product)
}

// DeleteProduct mocks base method.
func (m *MockProductService) DeleteProduct(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductServiceMockRecorder) DeleteProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductService)(nil).DeleteProduct), id)
}

// GetProduct mocks base method.
func (m *MockProductService) GetProduct(id uint) (*dto.ProductView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", id)
	ret0, _ := ret[0].(*dto.ProductView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductServiceMockRecorder) GetProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductService)(nil).GetProduct), id)
}

// GetProducts mocks base method.
func (m *MockProductService) GetProducts(filter *params.ProductFilter, pageInfo *builder.PageInfo) (*dto.PaginatedProductResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", filter, pageInfo)
	ret0, _ := ret[0].(*dto.PaginatedProductResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductServiceMockRecorder) GetProducts(filter, pageInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductService)(nil).GetProducts), filter, pageInfo)
}

// UpdateProduct mocks base method.
func (m *MockProductService) UpdateProduct(id uint, newValues *dto.ProductMutableAttrs) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, newValues)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductServiceMockRecorder) UpdateProduct(id, newValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductService)(nil).UpdateProduct), id, newValues)
}
