// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/product.go

// Package repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "thalesapi/data/dto"
	models "thalesapi/data/models"
	params "thalesapi/data/params"
	builder "thalesapi/db/builder"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// CountTotalProducts mocks base method.
func (m *MockProductRepo) CountTotalProducts(filter *params.ProductFilter, pageInfo *builder.PageInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalProducts", filter, pageInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalProducts indicates an expected call of CountTotalProducts.
func (mr *MockProductRepoMockRecorder) CountTotalProducts(filter, pageInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalProducts", reflect.TypeOf((*MockProductRepo)(nil).CountTotalProducts), filter, pageInfo)
}

// CreateProduct mocks base method.
func (m *MockProductRepo) CreateProduct(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepoMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepo)(nil).CreateProduct), product)
}

// DeleteProductByID mocks base method.
func (m *MockProductRepo) DeleteProductByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockProductRepoMockRecorder) DeleteProductByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockProductRepo)(nil).DeleteProductByID), id)
}

// FindProduct mocks base method.
func (m *MockProductRepo) FindProduct(id string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProduct", id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProduct indicates an expected call of FindProduct.
func (mr *MockProductRepoMockRecorder) FindProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProduct", reflect.TypeOf((*MockProductRepo)(nil).FindProduct), id)
}

// FindProducts mocks base method.
func (m *MockProductRepo) FindProducts(filter *params.ProductFilter, pageInfo *builder.PageInfo) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProducts", filter, pageInfo)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProducts indicates an expected call of FindProducts.
func (mr *MockProductRepoMockRecorder) FindProducts(filter, pageInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProducts", reflect.TypeOf((*MockProductRepo)(nil).FindProducts), filter, pageInfo)
}

// UpdateProduct mocks base method.
func (m *MockProductRepo) UpdateProduct(id string, newValues *dto.ProductMutableAttrs) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, newValues)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepoMockRecorder) UpdateProduct(id, newValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepo)(nil).UpdateProduct), id, newValues)
}
